Operations with the `Cart` entity

All operations must contain the appropriate `authorization` token:
  
```bash
--header 'authorization: Bearer xxxxx...'
```

And the `accept` and `content-type` headers:
 
```bash
  --header 'accept: application/json' \
  --header 'content-type: application/json'
```


## Create New Cart [/services/carts/v1]

Creates a new Cart using an optional User id.

::: note
Example
```bash
curl --request POST \
  --url http://localhost:3000/services/cart/v1 \
  --header 'authorization: Bearer xxxxx...' \
  --header 'accept: application/json' \
  --header 'content-type: application/json'
```
:::

### Create [POST]

+ Request with userId (application/json)

    + Headers
    
            accept: application/json
            authorization: Bearer xxxxx...

    + Attributes (NewCartRequest)

+ Response 201 (application/json)

  + Attributes (Cart)

+ Response 400 (application/json)

  + Body

            {
                "error": "Invalid user"
            }

+ Request anonymous (application/json)

  + Body

            {}

+ Response 201 (application/json)

  + Attributes (AnonymousCart)




## Get Cart [/services/carts/v1/{cartId}]

Gets a single Cart.

::: note
Example
```bash
curl --request GET \
  --url http://localhost:3000/services/cart/v1/ByQpDBcM \
  --header 'authorization: Bearer xxxxx...' \
  --header 'accept: application/json' \
  --header 'content-type: application/json'
```  
:::

+ Parameters

    + cartId: `HkwKLxjG` (string, required) - The Cart id

### Get [GET]

+ Request default (application/json)

    + Headers
    
            accept: application/json
            authorization: Bearer xxxxx...

+ Response 200 (application/json)

    + Attributes (Cart)

+ Response 404 (application/json)

    + Body
    
            {
              "statusCode": 404,
              "error": "Not Found",
              "message": "Cart not found"
            }    




## Add Entry to a Cart [/services/carts/v1/{cartId}/addEntry]

Adds an Entry to a Cart.

It calls the remote `stock:reserve` service to handle the stock reservation.

If the `warehouseId` is not provided, the `stock:reserve` service will 
use it's default Warehouse to make the reservation. 

::: note
Example
```bash
curl --request PUT \
  --url http://localhost:3000/services/cart/v1/{cartId}/addEntry \
  --header 'authorization: Bearer xxxxx...' \
  --header 'accept: application/json' \
  --header 'content-type: application/json' \
  --data '{"productId": "0001", "quantity": 10, "warehouseId": "001"}'
```
:::

+ Parameters

    + cartId: `ByQpDBcM` (string, required) - The Cart id

### Add Entry [PUT]

+ Request default (application/json)

    + Headers

            accept: application/json
            authorization: Bearer xxxxx...

    + Attributes (AddEntryRequest)

+ Response 201

  + Attributes (Entry)

+ Response 404 (application/json)

    + Body
    
            {
              "statusCode": 404,
              "error": "Not Found",
              "message": "Cart not found"
            }    

+ Request !quantity (application/json)

    + Headers

            accept: application/json
            authorization: Bearer xxxxx...

    + Attributes (AddEntryRequest)

+ Response 406 (application/json)

    + Body
    
            {
              "statusCode": 406,
              "error": "Not Acceptable",
              "message": "Quantity in cart for this product must be less than or equal to 5"
            }

+ Request !product (application/json)

    + Headers

            accept: application/json
            authorization: Bearer xxxxx...

    + Attributes (AddEntryRequest)

+ Response 406 (application/json)

    + Body
    
            {
              "statusCode": 406,
              "error": "Not Acceptable",
              "message": "The product '0001' doesn't exist"
            }
            
+ Request !stock (application/json)

    + Headers

            accept: application/json
            authorization: Bearer xxxxx...

    + Attributes (AddEntryRequest)

+ Response 406 (application/json)

    + Body
    
            {
              "statusCode": 406,
              "error": "Not Acceptable",
              "message": "The warehouse '001' doesn't have enough stock for the product '0001'"
            }




## Remove Entry from a Cart [/services/carts/v1/{cartId}/removeEntry/{entryId}]

Removes an Entry from a Cart.

It calls the remote `stock:reserve` service to handle the stock reservation.

If the `warehouseId` is not provided, the `stock:reserve` service will 
use it's default Warehouse to make the reservation. 

::: note
Example
```bash
curl --request DELETE \
  --url http://localhost:3000/services/cart/v1/{cartId}/removeEntry/{entryId} \
  --header 'authorization: Bearer xxxxx...' \
  --header 'accept: application/json' \
  --header 'content-type: application/json'
```
:::

+ Parameters

    + cartId: `ByQpDBcM` (string, required) - The Cart id
    + entryId: `ryLKuSJm` (string, required) - The Entry id

### Remove Entry [DELETE]

+ Request default (application/json)

    + Headers

            accept: application/json
            authorization: Bearer xxxxx...

    + Attributes (RemoveEntryRequest)

+ Response 201

+ Response 404 (application/json)

    + Body
    
            {
              "statusCode": 404,
              "error": "Not Found",
              "message": "Cart not found|Entry not found"
            }    
